name: Frontend CI/CD - Azure AKS

on:
  pull_request:
    # branches: [main, develop]
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend-deploy.yml'
  push:
    branches: [main]
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend-deploy.yml'

env:
  AZURE_CONTAINER_REGISTRY: democrhk
  CONTAINER_NAME: elearning-frontend
  RESOURCE_GROUP: DemoAKS-RG-HK
  CLUSTER_NAME: demoaks-hk
  DEPLOYMENT_MANIFEST_PATH: 'deployment/aks/frontend'
  ACR_LOGIN_SERVER: democrhk.azurecr.io

jobs:
  build:
    runs-on: ubuntu-latest
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'
        cache-dependency-path: 'frontend/package-lock.json'

    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Run type checking
      working-directory: ./frontend
      run: npm run type-check

    - name: Build application
      working-directory: ./frontend
      run: npm run build

    # Only build and push Docker image on main branch or when secrets are available
    - name: Check if push is needed
      id: should_push
      run: |
        if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          echo "should_push=true" >> $GITHUB_OUTPUT
        else
          echo "should_push=false" >> $GITHUB_OUTPUT
        fi

    # Azure Container Registry login (only when pushing)
    - name: Azure Container Registry login
      if: steps.should_push.outputs.should_push == 'true'
      uses: azure/docker-login@v1
      with:
        login-server: ${{ env.ACR_LOGIN_SERVER }}
        username: ${{ secrets.ACR_USERNAME || 'dummy-user' }}
        password: ${{ secrets.ACR_PASSWORD || 'dummy-password' }}

    # Extract metadata for Docker image
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.ACR_LOGIN_SERVER }}/${{ env.CONTAINER_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr,prefix=pr-
          type=raw,value=latest,enable={{is_default_branch}}

    # Build and push Docker image (only on main branch)
    - name: Build and push Docker image
      id: build
      if: steps.should_push.outputs.should_push == 'true'
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          VITE_API_BASE_URL=https://api.elearning.demo.com
          VITE_APP_TITLE=Contoso E-Learning Platform

    # Build only for PR (no push)
    - name: Build Docker image (PR only)
      if: steps.should_push.outputs.should_push == 'false'
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: false
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          VITE_API_BASE_URL=https://api.elearning.demo.com
          VITE_APP_TITLE=Contoso E-Learning Platform

  security-scan:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    # For PR, we just run a basic security scan on the built image
    - name: Run Trivy security scan
      run: |
        echo "Security scan would run here for PR"
        echo "Image tag: ${{ needs.build.outputs.image-tag }}"

  deploy:
    needs: [build]
    runs-on: ubuntu-latest
    environment: production
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
    
    - name: Get AKS credentials
      run: |
        az aks get-credentials --resource-group ${{ env.RESOURCE_GROUP }} --name ${{ env.CLUSTER_NAME }}
    
    - name: Create namespace if not exists
      run: |
        kubectl apply -f deployment/aks/frontend/01-namespace.yaml
    
    - name: Apply ConfigMaps and Secrets
      run: |
        kubectl apply -f deployment/aks/frontend/02-configmap.yaml
    
    - name: Update deployment image
      run: |
        # Update deployment manifest with new image tag
        sed -i "s|#{ACR_LOGIN_SERVER}#|${{ env.ACR_LOGIN_SERVER }}|g" deployment/aks/frontend/03-deployment.yaml
        sed -i "s|#{IMAGE_TAG}#|${{ github.sha }}|g" deployment/aks/frontend/03-deployment.yaml
        sed -i "s|#{VITE_API_BASE_URL}#|https://api.elearning.demo.com|g" deployment/aks/frontend/03-deployment.yaml
        
        echo "Updated deployment manifest:"
        cat deployment/aks/frontend/03-deployment.yaml | grep -A 5 -B 5 "image:"
    
    - name: Deploy application
      run: |
        # Apply all manifests in order
        echo "Applying deployment manifest..."
        kubectl apply -f deployment/aks/frontend/03-deployment.yaml
        
        echo "Applying service manifest..."
        kubectl apply -f deployment/aks/frontend/04-service.yaml
        
        echo "Applying ingress manifest..."
        kubectl apply -f deployment/aks/frontend/05-ingress.yaml
        
        echo "Applying HPA manifest..."
        kubectl apply -f deployment/aks/frontend/06-hpa.yaml
        
        echo "Checking deployment status..."
        kubectl get deployments -n elearning
       # kubectl apply -f deployment/aks/frontend/07-network-policy.yaml
    
    - name: Wait for deployment rollout
      run: |
        kubectl rollout status deployment/elearning-frontend -n elearning --timeout=600s
    
    - name: Verify deployment health
      run: |
        echo "Checking pod status..."
        kubectl get pods -n elearning -l app=elearning-frontend
        
        echo "Checking service status..."
        kubectl get svc -n elearning -l app=elearning-frontend
        
        echo "Checking ingress status..."
        kubectl get ingress -n elearning
        
        echo "Checking HPA status..."
        kubectl get hpa -n elearning
        
        # Wait for pods to be ready
        kubectl wait --for=condition=ready pod -l app=elearning-frontend -n elearning --timeout=300s
